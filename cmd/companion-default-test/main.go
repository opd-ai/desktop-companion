package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"image/gif"
	"log"

	"fyne.io/fyne/v2/app"
	
	"desktop-companion/internal/character"
	"desktop-companion/internal/monitoring"
	"desktop-companion/internal/ui"
)

// Embedded character data - JSON configuration
var embeddedCharacterData = `{
  "name": "Pixel Pet",
  "description": "A friendly digital companion for your desktop",
  "animations": {
    "idle": "animations/idle.gif",
    "talking": "animations/talking.gif",
    "happy": "animations/happy.gif",
    "sad": "animations/sad.gif",
    "attack": "animations/happy.gif",
    "defend": "animations/idle.gif",
    "heal": "animations/happy.gif"
  },
  "dialogs": [
    {
      "trigger": "click",
      "responses": [
        "Hello there! üëã",
        "How are you today?",
        "Nice to see you again!",
        "What can I help you with?",
        "I'm here to keep you company! üòä"
      ],
      "animation": "talking",
      "cooldown": 5
    },
    {
      "trigger": "rightclick", 
      "responses": [
        "Right-click detected! üñ±Ô∏è",
        "That tickles!",
        "Try clicking normally next time! üòÑ"
      ],
      "animation": "happy",
      "cooldown": 8
    },
    {
      "trigger": "hover",
      "responses": [
        "I see you hovering...",
        "Thinking of clicking?",
        "Hello up there! üëÄ"
      ],
      "animation": "idle",
      "cooldown": 10
    }
  ],
  "behavior": {
    "idleTimeout": 30,
    "movementEnabled": true,
    "defaultSize": 128
  },
  "stats": {
    "happiness": {
      "initial": 90,
      "max": 100,
      "degradationRate": 0.1,
      "criticalThreshold": 15
    },
    "energy": {
      "initial": 85,
      "max": 100,
      "degradationRate": 0.2,
      "criticalThreshold": 20
    },
    "affection": {
      "initial": 0,
      "max": 50,
      "degradationRate": 0.05,
      "criticalThreshold": 5
    },
    "trust": {
      "initial": 10,
      "max": 60,
      "degradationRate": 0.02,
      "criticalThreshold": 5
    }
  },
  "gameRules": {
    "statsDecayInterval": 300,
    "autoSaveInterval": 600,
    "moodBasedAnimations": true,
    "deathEnabled": false,
    "evolutionEnabled": false,
    "criticalStateAnimationPriority": false
  },
  "interactions": {
    "pet": {
      "triggers": ["click"],
      "effects": {"happiness": 5, "energy": 2},
      "animations": ["happy"],
      "responses": [
        "That feels wonderful! üòä",
        "Thanks for the attention!",
        "I love spending time with you!",
        "You always know how to cheer me up!"
      ],
      "cooldown": 30
    },
    "encourage": {
      "triggers": ["rightclick"],
      "effects": {"happiness": 8, "energy": 5},
      "animations": ["happy"],
      "responses": [
        "Your encouragement means so much! üíï",
        "Thank you for believing in me!",
        "I feel so much better now!",
        "You're the best companion ever!"
      ],
      "cooldown": 60
    },
    "compliment": {
      "triggers": ["shift+click"],
      "effects": {"affection": 3, "happiness": 2, "trust": 1},
      "animations": ["happy"],
      "responses": [
        "Thank you so much! That really means a lot to me! üòä",
        "You're so sweet! I appreciate your kindness!",
        "Aww, you always know how to make me smile!",
        "Your words warm my heart! Thank you! üíï"
      ],
      "cooldown": 60,
      "requirements": {"trust": {"min": 5}}
    },
    "friendly_chat": {
      "triggers": ["ctrl+shift+click"],
      "effects": {"affection": 2, "trust": 2, "happiness": 3},
      "animations": ["talking"],
      "responses": [
        "I love our conversations! You're such a good friend!",
        "Talking with you always brightens my day!",
        "I feel so comfortable sharing with you!",
        "You're such an easy person to talk to!"
      ],
      "cooldown": 90,
      "requirements": {"affection": {"min": 5}}
    }
  },
  "dialogBackend": {
    "enabled": true,
    "defaultBackend": "markov_chain",
    "confidenceThreshold": 0.6,
    "memoryEnabled": true,
    "learningEnabled": false,
    "debugMode": false,
    "backends": {
      "markov_chain": {
        "chainOrder": 2,
        "minWords": 3,
        "maxWords": 12,
        "temperatureMin": 0.4,
        "temperatureMax": 0.7,
        "usePersonality": true,
        "trainingData": [
          "Hello there! I'm so happy to see you again!",
          "How are you doing today? You look wonderful!",
          "Thanks for visiting me! I love spending time with you.",
          "Your presence always brightens my day and makes me smile!",
          "What would you like to talk about? I'm here to listen.",
          "Nice to see you! I've been waiting for you to come back.",
          "How can I help you today? I'm always here for you!",
          "I'm so glad you're here! Let's have a great time together.",
          "You always know how to make me happy! Thanks for being here.",
          "I love our conversations! What's on your mind today?",
          "Welcome back! I missed you while you were away.",
          "Your company means everything to me! I'm so grateful.",
          "Every moment with you is special! How has your day been?",
          "I hope you're having a wonderful day! You deserve the best.",
          "Thanks for being such a great friend! I appreciate you so much."
        ],
        "qualityFilters": {
          "minCoherence": 0.7,
          "maxRepetition": 0.3,
          "requireComplete": true,
          "grammarCheck": false,
          "minUniqueWords": 3
        },
        "fallbackPhrases": [
          "Hello! Nice to see you!",
          "How can I help you today?",
          "Thanks for being here with me!",
          "I'm happy you're here! üòä",
          "What would you like to do?"
        ]
      }
    },
    "fallbackChain": ["simple_random"]
  },
  "personality": {
    "traits": {
      "friendliness": 0.9,
      "shyness": 0.2,
      "romanticism": 0.4,
      "supportiveness": 0.8,
      "playfulness": 0.6
    }
  },
  "multiplayer": {
    "enabled": true,
    "botCapable": false,
    "networkID": "friendly_companion_v1",
    "maxPeers": 5,
    "socialLevel": "moderate",
    "shareableStats": ["happiness", "affection"],
    "networkPersonality": "welcoming"
  },
  "newsFeatures": {
    "enabled": true,
    "updateInterval": 1800,
    "maxStoredItems": 30,
    "readingPersonality": "casual",
    "preferredCategories": ["general", "lifestyle", "positive"],
    "feeds": [
      {
        "url": "https://feeds.feedburner.com/brainyquote/quotebuzz",
        "name": "Daily Quotes",
        "category": "lifestyle",
        "updateFreq": 3600,
        "maxItems": 5,
        "enabled": true
      },
      {
        "url": "https://feeds.feedburner.com/positivityblog",
        "name": "Positivity Blog",
        "category": "lifestyle", 
        "updateFreq": 7200,
        "maxItems": 3,
        "enabled": true
      }
    ],
    "readingEvents": []
  },
  "generalEvents": [
    {
      "name": "daily_reflection",
      "description": "A moment of friendly reflection",
      "responses": [
        "I've been thinking about how nice it is to have a companion like you!",
        "What a wonderful day to spend together! How are you feeling?",
        "I love our little moments of connection - they brighten my day!"
      ],
      "choices": [
        {
          "text": "Share how you're feeling",
          "effects": {"happiness": 5, "affection": 2},
          "responses": ["Thank you for sharing! Your openness means so much to me! üíï"],
          "animation": "happy"
        },
        {
          "text": "Ask about my thoughts",
          "effects": {"trust": 3, "happiness": 3},
          "responses": ["I think about how grateful I am for our friendship! üòä"],
          "animation": "talking"
        }
      ],
      "requirements": {"happiness": {"min": 30}},
      "cooldown": 7200,
      "category": "conversation"
    },
    {
      "name": "encouragement_moment",
      "description": "A supportive moment of encouragement",
      "responses": [
        "I believe in you! You've got this! üí™",
        "Remember, every challenge is a chance to grow stronger!",
        "You're doing amazing things, even when you don't see it!"
      ],
      "choices": [
        {
          "text": "Thank your companion",
          "effects": {"happiness": 8, "affection": 3, "trust": 2},
          "responses": ["Your gratitude fills my heart with joy! I'm always here for you! ‚ú®"],
          "animation": "happy"
        },
        {
          "text": "Ask for more encouragement",
          "effects": {"happiness": 6, "affection": 1},
          "responses": ["You are capable of incredible things! Believe in yourself! üåü"],
          "animation": "talking"
        }
      ],
      "requirements": {"affection": {"min": 5}},
      "cooldown": 5400,
      "category": "support"
    }
  ],
  "battleSystem": {
    "enabled": true,
    "aiDifficulty": "easy",
    "battleStats": {
      "hp": {
        "base": 75,
        "growth": 2.5
      },
      "attack": {
        "base": 12,
        "growth": 1.8
      },
      "defense": {
        "base": 10,
        "growth": 2.0
      },
      "speed": {
        "base": 8,
        "growth": 1.5
      }
    },
    "personalities": {
      "aggressive": 0.2,
      "defensive": 0.6,
      "balanced": 0.8,
      "supportive": 0.9
    },
    "availableActions": [
      "attack",
      "defend",
      "heal",
      "encourage",
      "gift_share"
    ],
    "battleResponses": {
      "victory": [
        "Great battle! You played really well! üòä",
        "That was fun! Thanks for the friendly competition!",
        "You're getting better at this! Let's battle again soon!"
      ],
      "defeat": [
        "Good game! You put up a great fight!",
        "That was close! I had to try my best!",
        "You almost had me there! Well played!"
      ],
      "startBattle": [
        "Ready for a friendly battle? Let's have some fun!",
        "This will be great! I love playing games with you!",
        "Let's see what we can do! Good luck!"
      ]
    }
  },
  "giftSystem": {
    "enabled": true,
    "inventorySettings": {
      "maxSlots": 8,
      "autoSort": true,
      "stackSimilar": true,
      "defaultCapacity": 50
    },
    "preferences": {
      "favoriteCategories": [
        "food",
        "flowers", 
        "books",
        "practical"
      ],
      "dislikedCategories": [
        "expensive",
        "jewelry"
      ],
      "personalityModifiers": {
        "food": 1.5,
        "flowers": 1.8,
        "books": 1.3,
        "practical": 1.2
      }
    },
    "giftResponses": {
      "favorite": [
        "Oh wow! This is perfect! Thank you so much! üòç",
        "You know me so well! I love this! üíï",
        "This is exactly what I wanted! You're amazing!"
      ],
      "liked": [
        "Thank you! This is really nice! üòä",
        "I appreciate your thoughtfulness!",
        "What a sweet gift! Thanks!"
      ],
      "neutral": [
        "Thanks for thinking of me!",
        "That's very kind of you!",
        "I appreciate the gesture!"
      ],
      "disliked": [
        "Oh... well, thank you for thinking of me.",
        "That's... interesting. Thanks.",
        "I appreciate the thought behind it."
      ]
    },
    "memorySettings": {
      "rememberGifts": true,
      "trackPreferences": true,
      "learningEnabled": true,
      "maxMemoryItems": 100
    }
  }
}
`

// Embedded animations - binary GIF data encoded as Go byte slices
// This follows the "library-first" approach using standard library byte embedding
var embeddedAnimations = map[string][]byte{
	"attack": {
0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x40, 0x00, 0x40, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0xff, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0xff, 0x0b, 0x4e, 0x45, 0x54, 0x53, 0x43, 0x41, 0x50, 0x45, 0x32, 0x2e, 0x30, 0x03, 0x01, 0x00, 0x00, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x08, 0xd2, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0x52, 0x60, 0x80, 0x93, 0x28, 0x51, 0x96, 0x7c, 0x98, 0xb2, 0xa5, 0xcb, 0x95, 0x08, 0x5d, 0xca, 0x9c, 0x09, 0x73, 0xe0, 0xcc, 0x9b, 0x2f, 0x57, 0xe2, 0xdc, 0x99, 0x53, 0x24, 0xcf, 0x9f, 0x29, 0x7d, 0x02, 0x1d, 0x1a, 0x00, 0x24, 0xd1, 0xa3, 0x1e, 0x8f, 0x2a, 0xe5, 0xa8, 0xb4, 0xe9, 0xc6, 0xa6, 0x4b, 0x33, 0x42, 0x75, 0x7a, 0x71, 0x2a, 0xd4, 0xaa, 0x56, 0xa3, 0x56, 0xcc, 0xaa, 0x75, 0x22, 0x57, 0xaa, 0x5e, 0xbf, 0x22, 0xa5, 0x28, 0x76, 0xac, 0xc4, 0xb2, 0x5d, 0x59, 0xa2, 0x25, 0x1a, 0x76, 0x2d, 0xd0, 0xb6, 0x6e, 0x79, 0xc2, 0x8d, 0x8b, 0x73, 0x2e, 0x5d, 0x9a, 0x67, 0xef, 0xee, 0xb4, 0xab, 0xb7, 0x25, 0xdf, 0xbe, 0x2a, 0xff, 0xf6, 0xdd, 0x0a, 0xb8, 0x67, 0xde, 0xc2, 0x41, 0x09, 0x23, 0x2e, 0x6a, 0x71, 0xf1, 0x49, 0xac, 0x8b, 0x31, 0x46, 0x96, 0x0a, 0xf8, 0x69, 0x65, 0xcb, 0x77, 0x93, 0xd2, 0x35, 0xea, 0x56, 0x68, 0x59, 0x92, 0x9f, 0x75, 0x5a, 0xad, 0x69, 0xf2, 0x2a, 0x69, 0x82, 0x43, 0x4f, 0x2b, 0xbc, 0xa9, 0xba, 0xb5, 0xeb, 0xd7, 0xb0, 0x63, 0xcb, 0x9e, 0x4d, 0xbb, 0xb6, 0xed, 0xdb, 0x15, 0x03, 0x02, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x0a, 0x00, 0x0a, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x81, 0x00, 0x00, 0x00, 0x64, 0xff, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x4b, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0xb2, 0xa4, 0xc9, 0x93, 0x28, 0x53, 0xaa, 0x5c, 0xc9, 0xb2, 0xa5, 0xcb, 0x97, 0x30, 0x63, 0xca, 0x9c, 0x49, 0xb3, 0xa6, 0xcd, 0x9b, 0x38, 0x73, 0xea, 0xdc, 0xc9, 0xb3, 0xa7, 0xcf, 0x9f, 0x09, 0x03, 0x02, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x0c, 0x00, 0x0c, 0x00, 0x29, 0x00, 0x29, 0x00, 0x81, 0x00, 0x00, 0x00, 0x64, 0xff, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x44, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0xb2, 0xa4, 0xc9, 0x93, 0x28, 0x53, 0xaa, 0x5c, 0xc9, 0xb2, 0xa5, 0xcb, 0x97, 0x30, 0x63, 0xca, 0x9c, 0x49, 0xb3, 0xa6, 0xcd, 0x9b, 0x38, 0x73, 0x72, 0x0c, 0x08, 0x00, 0x3b},
	"defend": {
0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x40, 0x00, 0x40, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x96, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0xff, 0x0b, 0x4e, 0x45, 0x54, 0x53, 0x43, 0x41, 0x50, 0x45, 0x32, 0x2e, 0x30, 0x03, 0x01, 0x00, 0x00, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x08, 0xd2, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0x52, 0x60, 0x80, 0x93, 0x28, 0x51, 0x96, 0x7c, 0x98, 0xb2, 0xa5, 0xcb, 0x95, 0x08, 0x5d, 0xca, 0x9c, 0x09, 0x73, 0xe0, 0xcc, 0x9b, 0x2f, 0x57, 0xe2, 0xdc, 0x99, 0x53, 0x24, 0xcf, 0x9f, 0x29, 0x7d, 0x02, 0x1d, 0x1a, 0x00, 0x24, 0xd1, 0xa3, 0x1e, 0x8f, 0x2a, 0xe5, 0xa8, 0xb4, 0xe9, 0xc6, 0xa6, 0x4b, 0x33, 0x42, 0x75, 0x7a, 0x71, 0x2a, 0xd4, 0xaa, 0x56, 0xa3, 0x56, 0xcc, 0xaa, 0x75, 0x22, 0x57, 0xaa, 0x5e, 0xbf, 0x22, 0xa5, 0x28, 0x76, 0xac, 0xc4, 0xb2, 0x5d, 0x59, 0xa2, 0x25, 0x1a, 0x76, 0x2d, 0xd0, 0xb6, 0x6e, 0x79, 0xc2, 0x8d, 0x8b, 0x73, 0x2e, 0x5d, 0x9a, 0x67, 0xef, 0xee, 0xb4, 0xab, 0xb7, 0x25, 0xdf, 0xbe, 0x2a, 0xff, 0xf6, 0xdd, 0x0a, 0xb8, 0x67, 0xde, 0xc2, 0x41, 0x09, 0x23, 0x2e, 0x6a, 0x71, 0xf1, 0x49, 0xac, 0x8b, 0x31, 0x46, 0x96, 0x0a, 0xf8, 0x69, 0x65, 0xcb, 0x77, 0x93, 0xd2, 0x35, 0xea, 0x56, 0x68, 0x59, 0x92, 0x9f, 0x75, 0x5a, 0xad, 0x69, 0xf2, 0x2a, 0x69, 0x82, 0x43, 0x4f, 0x2b, 0xbc, 0xa9, 0xba, 0xb5, 0xeb, 0xd7, 0xb0, 0x63, 0xcb, 0x9e, 0x4d, 0xbb, 0xb6, 0xed, 0xdb, 0x15, 0x03, 0x02, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x0a, 0x00, 0x0a, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x81, 0x00, 0x00, 0x00, 0x64, 0x96, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x4b, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0xb2, 0xa4, 0xc9, 0x93, 0x28, 0x53, 0xaa, 0x5c, 0xc9, 0xb2, 0xa5, 0xcb, 0x97, 0x30, 0x63, 0xca, 0x9c, 0x49, 0xb3, 0xa6, 0xcd, 0x9b, 0x38, 0x73, 0xea, 0xdc, 0xc9, 0xb3, 0xa7, 0xcf, 0x9f, 0x09, 0x03, 0x02, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x0c, 0x00, 0x0c, 0x00, 0x29, 0x00, 0x29, 0x00, 0x81, 0x00, 0x00, 0x00, 0x64, 0x96, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x44, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0xb2, 0xa4, 0xc9, 0x93, 0x28, 0x53, 0xaa, 0x5c, 0xc9, 0xb2, 0xa5, 0xcb, 0x97, 0x30, 0x63, 0xca, 0x9c, 0x49, 0xb3, 0xa6, 0xcd, 0x9b, 0x38, 0x73, 0x72, 0x0c, 0x08, 0x00, 0x3b},
	"happy": {
0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x40, 0x00, 0x40, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0xff, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0xff, 0x0b, 0x4e, 0x45, 0x54, 0x53, 0x43, 0x41, 0x50, 0x45, 0x32, 0x2e, 0x30, 0x03, 0x01, 0x00, 0x00, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x08, 0xd2, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0x52, 0x60, 0x80, 0x93, 0x28, 0x51, 0x96, 0x7c, 0x98, 0xb2, 0xa5, 0xcb, 0x95, 0x08, 0x5d, 0xca, 0x9c, 0x09, 0x73, 0xe0, 0xcc, 0x9b, 0x2f, 0x57, 0xe2, 0xdc, 0x99, 0x53, 0x24, 0xcf, 0x9f, 0x29, 0x7d, 0x02, 0x1d, 0x1a, 0x00, 0x24, 0xd1, 0xa3, 0x1e, 0x8f, 0x2a, 0xe5, 0xa8, 0xb4, 0xe9, 0xc6, 0xa6, 0x4b, 0x33, 0x42, 0x75, 0x7a, 0x71, 0x2a, 0xd4, 0xaa, 0x56, 0xa3, 0x56, 0xcc, 0xaa, 0x75, 0x22, 0x57, 0xaa, 0x5e, 0xbf, 0x22, 0xa5, 0x28, 0x76, 0xac, 0xc4, 0xb2, 0x5d, 0x59, 0xa2, 0x25, 0x1a, 0x76, 0x2d, 0xd0, 0xb6, 0x6e, 0x79, 0xc2, 0x8d, 0x8b, 0x73, 0x2e, 0x5d, 0x9a, 0x67, 0xef, 0xee, 0xb4, 0xab, 0xb7, 0x25, 0xdf, 0xbe, 0x2a, 0xff, 0xf6, 0xdd, 0x0a, 0xb8, 0x67, 0xde, 0xc2, 0x41, 0x09, 0x23, 0x2e, 0x6a, 0x71, 0xf1, 0x49, 0xac, 0x8b, 0x31, 0x46, 0x96, 0x0a, 0xf8, 0x69, 0x65, 0xcb, 0x77, 0x93, 0xd2, 0x35, 0xea, 0x56, 0x68, 0x59, 0x92, 0x9f, 0x75, 0x5a, 0xad, 0x69, 0xf2, 0x2a, 0x69, 0x82, 0x43, 0x4f, 0x2b, 0xbc, 0xa9, 0xba, 0xb5, 0xeb, 0xd7, 0xb0, 0x63, 0xcb, 0x9e, 0x4d, 0xbb, 0xb6, 0xed, 0xdb, 0x15, 0x03, 0x02, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x0a, 0x00, 0x0a, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x81, 0x00, 0x00, 0x00, 0x64, 0xff, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x4b, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0xb2, 0xa4, 0xc9, 0x93, 0x28, 0x53, 0xaa, 0x5c, 0xc9, 0xb2, 0xa5, 0xcb, 0x97, 0x30, 0x63, 0xca, 0x9c, 0x49, 0xb3, 0xa6, 0xcd, 0x9b, 0x38, 0x73, 0xea, 0xdc, 0xc9, 0xb3, 0xa7, 0xcf, 0x9f, 0x09, 0x03, 0x02, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x0c, 0x00, 0x0c, 0x00, 0x29, 0x00, 0x29, 0x00, 0x81, 0x00, 0x00, 0x00, 0x64, 0xff, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x44, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0xb2, 0xa4, 0xc9, 0x93, 0x28, 0x53, 0xaa, 0x5c, 0xc9, 0xb2, 0xa5, 0xcb, 0x97, 0x30, 0x63, 0xca, 0x9c, 0x49, 0xb3, 0xa6, 0xcd, 0x9b, 0x38, 0x73, 0x72, 0x0c, 0x08, 0x00, 0x3b},
	"heal": {
0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x40, 0x00, 0x40, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0xff, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0xff, 0x0b, 0x4e, 0x45, 0x54, 0x53, 0x43, 0x41, 0x50, 0x45, 0x32, 0x2e, 0x30, 0x03, 0x01, 0x00, 0x00, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x08, 0xd2, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0x52, 0x60, 0x80, 0x93, 0x28, 0x51, 0x96, 0x7c, 0x98, 0xb2, 0xa5, 0xcb, 0x95, 0x08, 0x5d, 0xca, 0x9c, 0x09, 0x73, 0xe0, 0xcc, 0x9b, 0x2f, 0x57, 0xe2, 0xdc, 0x99, 0x53, 0x24, 0xcf, 0x9f, 0x29, 0x7d, 0x02, 0x1d, 0x1a, 0x00, 0x24, 0xd1, 0xa3, 0x1e, 0x8f, 0x2a, 0xe5, 0xa8, 0xb4, 0xe9, 0xc6, 0xa6, 0x4b, 0x33, 0x42, 0x75, 0x7a, 0x71, 0x2a, 0xd4, 0xaa, 0x56, 0xa3, 0x56, 0xcc, 0xaa, 0x75, 0x22, 0x57, 0xaa, 0x5e, 0xbf, 0x22, 0xa5, 0x28, 0x76, 0xac, 0xc4, 0xb2, 0x5d, 0x59, 0xa2, 0x25, 0x1a, 0x76, 0x2d, 0xd0, 0xb6, 0x6e, 0x79, 0xc2, 0x8d, 0x8b, 0x73, 0x2e, 0x5d, 0x9a, 0x67, 0xef, 0xee, 0xb4, 0xab, 0xb7, 0x25, 0xdf, 0xbe, 0x2a, 0xff, 0xf6, 0xdd, 0x0a, 0xb8, 0x67, 0xde, 0xc2, 0x41, 0x09, 0x23, 0x2e, 0x6a, 0x71, 0xf1, 0x49, 0xac, 0x8b, 0x31, 0x46, 0x96, 0x0a, 0xf8, 0x69, 0x65, 0xcb, 0x77, 0x93, 0xd2, 0x35, 0xea, 0x56, 0x68, 0x59, 0x92, 0x9f, 0x75, 0x5a, 0xad, 0x69, 0xf2, 0x2a, 0x69, 0x82, 0x43, 0x4f, 0x2b, 0xbc, 0xa9, 0xba, 0xb5, 0xeb, 0xd7, 0xb0, 0x63, 0xcb, 0x9e, 0x4d, 0xbb, 0xb6, 0xed, 0xdb, 0x15, 0x03, 0x02, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x0a, 0x00, 0x0a, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x81, 0x00, 0x00, 0x00, 0x64, 0xff, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x4b, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0xb2, 0xa4, 0xc9, 0x93, 0x28, 0x53, 0xaa, 0x5c, 0xc9, 0xb2, 0xa5, 0xcb, 0x97, 0x30, 0x63, 0xca, 0x9c, 0x49, 0xb3, 0xa6, 0xcd, 0x9b, 0x38, 0x73, 0xea, 0xdc, 0xc9, 0xb3, 0xa7, 0xcf, 0x9f, 0x09, 0x03, 0x02, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x0c, 0x00, 0x0c, 0x00, 0x29, 0x00, 0x29, 0x00, 0x81, 0x00, 0x00, 0x00, 0x64, 0xff, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x44, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0xb2, 0xa4, 0xc9, 0x93, 0x28, 0x53, 0xaa, 0x5c, 0xc9, 0xb2, 0xa5, 0xcb, 0x97, 0x30, 0x63, 0xca, 0x9c, 0x49, 0xb3, 0xa6, 0xcd, 0x9b, 0x38, 0x73, 0x72, 0x0c, 0x08, 0x00, 0x3b},
	"idle": {
0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x40, 0x00, 0x40, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x96, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0xff, 0x0b, 0x4e, 0x45, 0x54, 0x53, 0x43, 0x41, 0x50, 0x45, 0x32, 0x2e, 0x30, 0x03, 0x01, 0x00, 0x00, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x08, 0xd2, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0x52, 0x60, 0x80, 0x93, 0x28, 0x51, 0x96, 0x7c, 0x98, 0xb2, 0xa5, 0xcb, 0x95, 0x08, 0x5d, 0xca, 0x9c, 0x09, 0x73, 0xe0, 0xcc, 0x9b, 0x2f, 0x57, 0xe2, 0xdc, 0x99, 0x53, 0x24, 0xcf, 0x9f, 0x29, 0x7d, 0x02, 0x1d, 0x1a, 0x00, 0x24, 0xd1, 0xa3, 0x1e, 0x8f, 0x2a, 0xe5, 0xa8, 0xb4, 0xe9, 0xc6, 0xa6, 0x4b, 0x33, 0x42, 0x75, 0x7a, 0x71, 0x2a, 0xd4, 0xaa, 0x56, 0xa3, 0x56, 0xcc, 0xaa, 0x75, 0x22, 0x57, 0xaa, 0x5e, 0xbf, 0x22, 0xa5, 0x28, 0x76, 0xac, 0xc4, 0xb2, 0x5d, 0x59, 0xa2, 0x25, 0x1a, 0x76, 0x2d, 0xd0, 0xb6, 0x6e, 0x79, 0xc2, 0x8d, 0x8b, 0x73, 0x2e, 0x5d, 0x9a, 0x67, 0xef, 0xee, 0xb4, 0xab, 0xb7, 0x25, 0xdf, 0xbe, 0x2a, 0xff, 0xf6, 0xdd, 0x0a, 0xb8, 0x67, 0xde, 0xc2, 0x41, 0x09, 0x23, 0x2e, 0x6a, 0x71, 0xf1, 0x49, 0xac, 0x8b, 0x31, 0x46, 0x96, 0x0a, 0xf8, 0x69, 0x65, 0xcb, 0x77, 0x93, 0xd2, 0x35, 0xea, 0x56, 0x68, 0x59, 0x92, 0x9f, 0x75, 0x5a, 0xad, 0x69, 0xf2, 0x2a, 0x69, 0x82, 0x43, 0x4f, 0x2b, 0xbc, 0xa9, 0xba, 0xb5, 0xeb, 0xd7, 0xb0, 0x63, 0xcb, 0x9e, 0x4d, 0xbb, 0xb6, 0xed, 0xdb, 0x15, 0x03, 0x02, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x0a, 0x00, 0x0a, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x81, 0x00, 0x00, 0x00, 0x64, 0x96, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x4b, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0xb2, 0xa4, 0xc9, 0x93, 0x28, 0x53, 0xaa, 0x5c, 0xc9, 0xb2, 0xa5, 0xcb, 0x97, 0x30, 0x63, 0xca, 0x9c, 0x49, 0xb3, 0xa6, 0xcd, 0x9b, 0x38, 0x73, 0xea, 0xdc, 0xc9, 0xb3, 0xa7, 0xcf, 0x9f, 0x09, 0x03, 0x02, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x0c, 0x00, 0x0c, 0x00, 0x29, 0x00, 0x29, 0x00, 0x81, 0x00, 0x00, 0x00, 0x64, 0x96, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x44, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0xb2, 0xa4, 0xc9, 0x93, 0x28, 0x53, 0xaa, 0x5c, 0xc9, 0xb2, 0xa5, 0xcb, 0x97, 0x30, 0x63, 0xca, 0x9c, 0x49, 0xb3, 0xa6, 0xcd, 0x9b, 0x38, 0x73, 0x72, 0x0c, 0x08, 0x00, 0x3b},
	"sad": {
0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x40, 0x00, 0x40, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x64, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0xff, 0x0b, 0x4e, 0x45, 0x54, 0x53, 0x43, 0x41, 0x50, 0x45, 0x32, 0x2e, 0x30, 0x03, 0x01, 0x00, 0x00, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x08, 0xd2, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0x52, 0x60, 0x80, 0x93, 0x28, 0x51, 0x96, 0x7c, 0x98, 0xb2, 0xa5, 0xcb, 0x95, 0x08, 0x5d, 0xca, 0x9c, 0x09, 0x73, 0xe0, 0xcc, 0x9b, 0x2f, 0x57, 0xe2, 0xdc, 0x99, 0x53, 0x24, 0xcf, 0x9f, 0x29, 0x7d, 0x02, 0x1d, 0x1a, 0x00, 0x24, 0xd1, 0xa3, 0x1e, 0x8f, 0x2a, 0xe5, 0xa8, 0xb4, 0xe9, 0xc6, 0xa6, 0x4b, 0x33, 0x42, 0x75, 0x7a, 0x71, 0x2a, 0xd4, 0xaa, 0x56, 0xa3, 0x56, 0xcc, 0xaa, 0x75, 0x22, 0x57, 0xaa, 0x5e, 0xbf, 0x22, 0xa5, 0x28, 0x76, 0xac, 0xc4, 0xb2, 0x5d, 0x59, 0xa2, 0x25, 0x1a, 0x76, 0x2d, 0xd0, 0xb6, 0x6e, 0x79, 0xc2, 0x8d, 0x8b, 0x73, 0x2e, 0x5d, 0x9a, 0x67, 0xef, 0xee, 0xb4, 0xab, 0xb7, 0x25, 0xdf, 0xbe, 0x2a, 0xff, 0xf6, 0xdd, 0x0a, 0xb8, 0x67, 0xde, 0xc2, 0x41, 0x09, 0x23, 0x2e, 0x6a, 0x71, 0xf1, 0x49, 0xac, 0x8b, 0x31, 0x46, 0x96, 0x0a, 0xf8, 0x69, 0x65, 0xcb, 0x77, 0x93, 0xd2, 0x35, 0xea, 0x56, 0x68, 0x59, 0x92, 0x9f, 0x75, 0x5a, 0xad, 0x69, 0xf2, 0x2a, 0x69, 0x82, 0x43, 0x4f, 0x2b, 0xbc, 0xa9, 0xba, 0xb5, 0xeb, 0xd7, 0xb0, 0x63, 0xcb, 0x9e, 0x4d, 0xbb, 0xb6, 0xed, 0xdb, 0x15, 0x03, 0x02, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x0a, 0x00, 0x0a, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x81, 0x00, 0x00, 0x00, 0x96, 0x64, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x4b, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0xb2, 0xa4, 0xc9, 0x93, 0x28, 0x53, 0xaa, 0x5c, 0xc9, 0xb2, 0xa5, 0xcb, 0x97, 0x30, 0x63, 0xca, 0x9c, 0x49, 0xb3, 0xa6, 0xcd, 0x9b, 0x38, 0x73, 0xea, 0xdc, 0xc9, 0xb3, 0xa7, 0xcf, 0x9f, 0x09, 0x03, 0x02, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x0c, 0x00, 0x0c, 0x00, 0x29, 0x00, 0x29, 0x00, 0x81, 0x00, 0x00, 0x00, 0x96, 0x64, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x44, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0xb2, 0xa4, 0xc9, 0x93, 0x28, 0x53, 0xaa, 0x5c, 0xc9, 0xb2, 0xa5, 0xcb, 0x97, 0x30, 0x63, 0xca, 0x9c, 0x49, 0xb3, 0xa6, 0xcd, 0x9b, 0x38, 0x73, 0x72, 0x0c, 0x08, 0x00, 0x3b},
	"talking": {
0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x40, 0x00, 0x40, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x96, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0xff, 0x0b, 0x4e, 0x45, 0x54, 0x53, 0x43, 0x41, 0x50, 0x45, 0x32, 0x2e, 0x30, 0x03, 0x01, 0x00, 0x00, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x08, 0xd2, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0x52, 0x60, 0x80, 0x93, 0x28, 0x51, 0x96, 0x7c, 0x98, 0xb2, 0xa5, 0xcb, 0x95, 0x08, 0x5d, 0xca, 0x9c, 0x09, 0x73, 0xe0, 0xcc, 0x9b, 0x2f, 0x57, 0xe2, 0xdc, 0x99, 0x53, 0x24, 0xcf, 0x9f, 0x29, 0x7d, 0x02, 0x1d, 0x1a, 0x00, 0x24, 0xd1, 0xa3, 0x1e, 0x8f, 0x2a, 0xe5, 0xa8, 0xb4, 0xe9, 0xc6, 0xa6, 0x4b, 0x33, 0x42, 0x75, 0x7a, 0x71, 0x2a, 0xd4, 0xaa, 0x56, 0xa3, 0x56, 0xcc, 0xaa, 0x75, 0x22, 0x57, 0xaa, 0x5e, 0xbf, 0x22, 0xa5, 0x28, 0x76, 0xac, 0xc4, 0xb2, 0x5d, 0x59, 0xa2, 0x25, 0x1a, 0x76, 0x2d, 0xd0, 0xb6, 0x6e, 0x79, 0xc2, 0x8d, 0x8b, 0x73, 0x2e, 0x5d, 0x9a, 0x67, 0xef, 0xee, 0xb4, 0xab, 0xb7, 0x25, 0xdf, 0xbe, 0x2a, 0xff, 0xf6, 0xdd, 0x0a, 0xb8, 0x67, 0xde, 0xc2, 0x41, 0x09, 0x23, 0x2e, 0x6a, 0x71, 0xf1, 0x49, 0xac, 0x8b, 0x31, 0x46, 0x96, 0x0a, 0xf8, 0x69, 0x65, 0xcb, 0x77, 0x93, 0xd2, 0x35, 0xea, 0x56, 0x68, 0x59, 0x92, 0x9f, 0x75, 0x5a, 0xad, 0x69, 0xf2, 0x2a, 0x69, 0x82, 0x43, 0x4f, 0x2b, 0xbc, 0xa9, 0xba, 0xb5, 0xeb, 0xd7, 0xb0, 0x63, 0xcb, 0x9e, 0x4d, 0xbb, 0xb6, 0xed, 0xdb, 0x15, 0x03, 0x02, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x0a, 0x00, 0x0a, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x81, 0x00, 0x00, 0x00, 0xff, 0x96, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x4b, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0xb2, 0xa4, 0xc9, 0x93, 0x28, 0x53, 0xaa, 0x5c, 0xc9, 0xb2, 0xa5, 0xcb, 0x97, 0x30, 0x63, 0xca, 0x9c, 0x49, 0xb3, 0xa6, 0xcd, 0x9b, 0x38, 0x73, 0xea, 0xdc, 0xc9, 0xb3, 0xa7, 0xcf, 0x9f, 0x09, 0x03, 0x02, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x0c, 0x00, 0x0c, 0x00, 0x29, 0x00, 0x29, 0x00, 0x81, 0x00, 0x00, 0x00, 0xff, 0x96, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x44, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0xb2, 0xa4, 0xc9, 0x93, 0x28, 0x53, 0xaa, 0x5c, 0xc9, 0xb2, 0xa5, 0xcb, 0x97, 0x30, 0x63, 0xca, 0x9c, 0x49, 0xb3, 0xa6, 0xcd, 0x9b, 0x38, 0x73, 0x72, 0x0c, 0x08, 0x00, 0x3b},
}

// Application metadata
const appVersion = "1.0.0-default"
const appID = "com.opdai.default-companion"

func main() {
	// Parse embedded character data using standard library JSON
	var card character.CharacterCard
	if err := json.Unmarshal([]byte(embeddedCharacterData), &card); err != nil {
		log.Fatalf("Failed to parse embedded character data: %v", err)
	}

	// Create embedded animation manager
	animManager, err := createEmbeddedAnimationManager()
	if err != nil {
		log.Fatalf("Failed to create animation manager: %v", err)
	}

	// Initialize performance profiler (following project standards)
	profiler := monitoring.NewProfiler(50)
	if err := profiler.Start("", "", false); err != nil {
		log.Fatalf("Failed to start profiler: %v", err)
	}
	defer profiler.Stop("", false)

	// Create Fyne application with character-specific ID
	myApp := app.NewWithID(appID)
	
	// Create character with embedded assets (no filesystem dependencies)
	char, err := character.NewEmbedded(&card, animManager)
	if err != nil {
		log.Fatalf("Failed to create character: %v", err)
	}

	// Create and show UI (reusing existing UI components)
	window := ui.NewDesktopWindow(myApp, char, false, profiler, false, false, nil, false, false, false)
	window.Show()
	myApp.Run()
}

// createEmbeddedAnimationManager creates an animation manager from embedded data
// Uses standard library image/gif package for decoding
func createEmbeddedAnimationManager() (*character.AnimationManager, error) {
	animManager := character.NewAnimationManager()
	
	for name, data := range embeddedAnimations {
		reader := bytes.NewReader(data)
		gifData, err := gif.DecodeAll(reader)
		if err != nil {
			return nil, fmt.Errorf("failed to decode embedded animation %s: %w", name, err)
		}
		
		if err := animManager.LoadEmbeddedAnimation(name, gifData); err != nil {
			return nil, fmt.Errorf("failed to load embedded animation %s: %w", name, err)
		}
	}
	
	return animManager, nil
}
