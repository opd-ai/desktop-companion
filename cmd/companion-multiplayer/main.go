package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"image/gif"
	"log"

	"fyne.io/fyne/v2/app"
	
	"desktop-companion/internal/character"
	"desktop-companion/internal/monitoring"
	"desktop-companion/internal/ui"
)

// Embedded character data - JSON configuration
var embeddedCharacterData = `{
  "name": "Multiplayer Bot",
  "description": "A versatile multiplayer companion for network play",
  "animations": {
    "idle": "animations/idle.gif",
    "talking": "animations/talking.gif",
    "happy": "animations/happy.gif"
  },
  "dialogs": [
    {
      "trigger": "click",
      "responses": [
        "Hi there! Ready for multiplayer fun? ðŸŽ®",
        "Want to connect with other players?",
        "I'm here to help coordinate your multiplayer session!",
        "Let's find some friends to play with! ðŸ˜Š",
        "Multiplayer mode is so much more fun!"
      ],
      "animation": "talking",
      "cooldown": 5
    }
  ],
  "behavior": {
    "idleTimeout": 30,
    "movementEnabled": true,
    "defaultSize": 128,
    "clickable": true,
    "draggable": true
  },
  "multiplayer": {
    "enabled": true,
    "botCapable": true,
    "networkID": "multiplayer_default_v1",
    "maxPeers": 8,
    "discoveryPort": 8080,
    "botPersonality": {
      "chattiness": 0.7,
      "helpfulness": 0.9,
      "playfulness": 0.6,
      "patience": 0.8
    },
    "networkFeatures": {
      "groupChat": true,
      "characterSharing": true,
      "eventCoordination": true,
      "battleSystem": true
    }
  },
  "features": {
    "ai": {
      "enabled": true,
      "dialogBackend": {
        "enabled": true,
        "type": "markov",
        "config": {
          "order": 2,
          "enableLearning": true,
          "personalityWeight": 0.7,
          "contextMemory": 10
        }
      }
    },
    "romance": {
      "enabled": true,
      "maxLevel": 3,
      "personality": {
        "openness": 0.7,
        "friendliness": 0.9,
        "loyalty": 0.8,
        "patience": 0.7,
        "playfulness": 0.6
      },
      "interactions": [
        {
          "type": "gift",
          "unlockLevel": 1,
          "cooldown": 60,
          "affectionChange": 5
        },
        {
          "type": "compliment", 
          "unlockLevel": 1,
          "cooldown": 30,
          "affectionChange": 3
        },
        {
          "type": "date",
          "unlockLevel": 2,
          "cooldown": 300,
          "affectionChange": 10
        }
      ]
    },
    "game": {
      "enabled": true,
      "initialStats": {
        "health": 100,
        "happiness": 80,
        "energy": 90,
        "hunger": 70
      },
      "statDecayRates": {
        "health": 0.1,
        "happiness": 0.2,
        "energy": 0.3,
        "hunger": 0.4
      },
      "interactions": [
        {
          "name": "feed",
          "animation": "happy",
          "effects": {
            "hunger": 20,
            "happiness": 10
          },
          "cooldown": 30
        },
        {
          "name": "play",
          "animation": "happy", 
          "effects": {
            "happiness": 25,
            "energy": -10
          },
          "cooldown": 60
        },
        {
          "name": "rest",
          "animation": "idle",
          "effects": {
            "energy": 30,
            "health": 5
          },
          "cooldown": 120
        }
      ]
    },
    "events": {
      "enabled": true,
      "scenarios": [
        {
          "name": "Multiplayer Welcome",
          "trigger": "startup",
          "dialogs": [
            "Welcome to multiplayer mode! Let's find some friends to play with!"
          ],
          "effects": {
            "happiness": 10
          }
        },
        {
          "name": "New Player Joined",
          "trigger": "player_join", 
          "dialogs": [
            "A new player joined! Let's make them feel welcome!",
            "More friends means more fun! ðŸŽ‰"
          ],
          "effects": {
            "happiness": 5
          }
        }
      ]
    }
  }
}
`

// Embedded animations - binary GIF data encoded as Go byte slices
// This follows the "library-first" approach using standard library byte embedding
var embeddedAnimations = map[string][]byte{
	"happy": {
0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x40, 0x00, 0x40, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0xff, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0xff, 0x0b, 0x4e, 0x45, 0x54, 0x53, 0x43, 0x41, 0x50, 0x45, 0x32, 0x2e, 0x30, 0x03, 0x01, 0x00, 0x00, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x08, 0xd2, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0x52, 0x60, 0x80, 0x93, 0x28, 0x51, 0x96, 0x7c, 0x98, 0xb2, 0xa5, 0xcb, 0x95, 0x08, 0x5d, 0xca, 0x9c, 0x09, 0x73, 0xe0, 0xcc, 0x9b, 0x2f, 0x57, 0xe2, 0xdc, 0x99, 0x53, 0x24, 0xcf, 0x9f, 0x29, 0x7d, 0x02, 0x1d, 0x1a, 0x00, 0x24, 0xd1, 0xa3, 0x1e, 0x8f, 0x2a, 0xe5, 0xa8, 0xb4, 0xe9, 0xc6, 0xa6, 0x4b, 0x33, 0x42, 0x75, 0x7a, 0x71, 0x2a, 0xd4, 0xaa, 0x56, 0xa3, 0x56, 0xcc, 0xaa, 0x75, 0x22, 0x57, 0xaa, 0x5e, 0xbf, 0x22, 0xa5, 0x28, 0x76, 0xac, 0xc4, 0xb2, 0x5d, 0x59, 0xa2, 0x25, 0x1a, 0x76, 0x2d, 0xd0, 0xb6, 0x6e, 0x79, 0xc2, 0x8d, 0x8b, 0x73, 0x2e, 0x5d, 0x9a, 0x67, 0xef, 0xee, 0xb4, 0xab, 0xb7, 0x25, 0xdf, 0xbe, 0x2a, 0xff, 0xf6, 0xdd, 0x0a, 0xb8, 0x67, 0xde, 0xc2, 0x41, 0x09, 0x23, 0x2e, 0x6a, 0x71, 0xf1, 0x49, 0xac, 0x8b, 0x31, 0x46, 0x96, 0x0a, 0xf8, 0x69, 0x65, 0xcb, 0x77, 0x93, 0xd2, 0x35, 0xea, 0x56, 0x68, 0x59, 0x92, 0x9f, 0x75, 0x5a, 0xad, 0x69, 0xf2, 0x2a, 0x69, 0x82, 0x43, 0x4f, 0x2b, 0xbc, 0xa9, 0xba, 0xb5, 0xeb, 0xd7, 0xb0, 0x63, 0xcb, 0x9e, 0x4d, 0xbb, 0xb6, 0xed, 0xdb, 0x15, 0x03, 0x02, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x0a, 0x00, 0x0a, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x81, 0x00, 0x00, 0x00, 0x64, 0xff, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x4b, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0xb2, 0xa4, 0xc9, 0x93, 0x28, 0x53, 0xaa, 0x5c, 0xc9, 0xb2, 0xa5, 0xcb, 0x97, 0x30, 0x63, 0xca, 0x9c, 0x49, 0xb3, 0xa6, 0xcd, 0x9b, 0x38, 0x73, 0xea, 0xdc, 0xc9, 0xb3, 0xa7, 0xcf, 0x9f, 0x09, 0x03, 0x02, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x0c, 0x00, 0x0c, 0x00, 0x29, 0x00, 0x29, 0x00, 0x81, 0x00, 0x00, 0x00, 0x64, 0xff, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x44, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0xb2, 0xa4, 0xc9, 0x93, 0x28, 0x53, 0xaa, 0x5c, 0xc9, 0xb2, 0xa5, 0xcb, 0x97, 0x30, 0x63, 0xca, 0x9c, 0x49, 0xb3, 0xa6, 0xcd, 0x9b, 0x38, 0x73, 0x72, 0x0c, 0x08, 0x00, 0x3b},
	"idle": {
0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x40, 0x00, 0x40, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x96, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0xff, 0x0b, 0x4e, 0x45, 0x54, 0x53, 0x43, 0x41, 0x50, 0x45, 0x32, 0x2e, 0x30, 0x03, 0x01, 0x00, 0x00, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x08, 0xd2, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0x52, 0x60, 0x80, 0x93, 0x28, 0x51, 0x96, 0x7c, 0x98, 0xb2, 0xa5, 0xcb, 0x95, 0x08, 0x5d, 0xca, 0x9c, 0x09, 0x73, 0xe0, 0xcc, 0x9b, 0x2f, 0x57, 0xe2, 0xdc, 0x99, 0x53, 0x24, 0xcf, 0x9f, 0x29, 0x7d, 0x02, 0x1d, 0x1a, 0x00, 0x24, 0xd1, 0xa3, 0x1e, 0x8f, 0x2a, 0xe5, 0xa8, 0xb4, 0xe9, 0xc6, 0xa6, 0x4b, 0x33, 0x42, 0x75, 0x7a, 0x71, 0x2a, 0xd4, 0xaa, 0x56, 0xa3, 0x56, 0xcc, 0xaa, 0x75, 0x22, 0x57, 0xaa, 0x5e, 0xbf, 0x22, 0xa5, 0x28, 0x76, 0xac, 0xc4, 0xb2, 0x5d, 0x59, 0xa2, 0x25, 0x1a, 0x76, 0x2d, 0xd0, 0xb6, 0x6e, 0x79, 0xc2, 0x8d, 0x8b, 0x73, 0x2e, 0x5d, 0x9a, 0x67, 0xef, 0xee, 0xb4, 0xab, 0xb7, 0x25, 0xdf, 0xbe, 0x2a, 0xff, 0xf6, 0xdd, 0x0a, 0xb8, 0x67, 0xde, 0xc2, 0x41, 0x09, 0x23, 0x2e, 0x6a, 0x71, 0xf1, 0x49, 0xac, 0x8b, 0x31, 0x46, 0x96, 0x0a, 0xf8, 0x69, 0x65, 0xcb, 0x77, 0x93, 0xd2, 0x35, 0xea, 0x56, 0x68, 0x59, 0x92, 0x9f, 0x75, 0x5a, 0xad, 0x69, 0xf2, 0x2a, 0x69, 0x82, 0x43, 0x4f, 0x2b, 0xbc, 0xa9, 0xba, 0xb5, 0xeb, 0xd7, 0xb0, 0x63, 0xcb, 0x9e, 0x4d, 0xbb, 0xb6, 0xed, 0xdb, 0x15, 0x03, 0x02, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x0a, 0x00, 0x0a, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x81, 0x00, 0x00, 0x00, 0x64, 0x96, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x4b, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0xb2, 0xa4, 0xc9, 0x93, 0x28, 0x53, 0xaa, 0x5c, 0xc9, 0xb2, 0xa5, 0xcb, 0x97, 0x30, 0x63, 0xca, 0x9c, 0x49, 0xb3, 0xa6, 0xcd, 0x9b, 0x38, 0x73, 0xea, 0xdc, 0xc9, 0xb3, 0xa7, 0xcf, 0x9f, 0x09, 0x03, 0x02, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x0c, 0x00, 0x0c, 0x00, 0x29, 0x00, 0x29, 0x00, 0x81, 0x00, 0x00, 0x00, 0x64, 0x96, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x44, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0xb2, 0xa4, 0xc9, 0x93, 0x28, 0x53, 0xaa, 0x5c, 0xc9, 0xb2, 0xa5, 0xcb, 0x97, 0x30, 0x63, 0xca, 0x9c, 0x49, 0xb3, 0xa6, 0xcd, 0x9b, 0x38, 0x73, 0x72, 0x0c, 0x08, 0x00, 0x3b},
	"talking": {
0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x40, 0x00, 0x40, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x96, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0xff, 0x0b, 0x4e, 0x45, 0x54, 0x53, 0x43, 0x41, 0x50, 0x45, 0x32, 0x2e, 0x30, 0x03, 0x01, 0x00, 0x00, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x08, 0xd2, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0x52, 0x60, 0x80, 0x93, 0x28, 0x51, 0x96, 0x7c, 0x98, 0xb2, 0xa5, 0xcb, 0x95, 0x08, 0x5d, 0xca, 0x9c, 0x09, 0x73, 0xe0, 0xcc, 0x9b, 0x2f, 0x57, 0xe2, 0xdc, 0x99, 0x53, 0x24, 0xcf, 0x9f, 0x29, 0x7d, 0x02, 0x1d, 0x1a, 0x00, 0x24, 0xd1, 0xa3, 0x1e, 0x8f, 0x2a, 0xe5, 0xa8, 0xb4, 0xe9, 0xc6, 0xa6, 0x4b, 0x33, 0x42, 0x75, 0x7a, 0x71, 0x2a, 0xd4, 0xaa, 0x56, 0xa3, 0x56, 0xcc, 0xaa, 0x75, 0x22, 0x57, 0xaa, 0x5e, 0xbf, 0x22, 0xa5, 0x28, 0x76, 0xac, 0xc4, 0xb2, 0x5d, 0x59, 0xa2, 0x25, 0x1a, 0x76, 0x2d, 0xd0, 0xb6, 0x6e, 0x79, 0xc2, 0x8d, 0x8b, 0x73, 0x2e, 0x5d, 0x9a, 0x67, 0xef, 0xee, 0xb4, 0xab, 0xb7, 0x25, 0xdf, 0xbe, 0x2a, 0xff, 0xf6, 0xdd, 0x0a, 0xb8, 0x67, 0xde, 0xc2, 0x41, 0x09, 0x23, 0x2e, 0x6a, 0x71, 0xf1, 0x49, 0xac, 0x8b, 0x31, 0x46, 0x96, 0x0a, 0xf8, 0x69, 0x65, 0xcb, 0x77, 0x93, 0xd2, 0x35, 0xea, 0x56, 0x68, 0x59, 0x92, 0x9f, 0x75, 0x5a, 0xad, 0x69, 0xf2, 0x2a, 0x69, 0x82, 0x43, 0x4f, 0x2b, 0xbc, 0xa9, 0xba, 0xb5, 0xeb, 0xd7, 0xb0, 0x63, 0xcb, 0x9e, 0x4d, 0xbb, 0xb6, 0xed, 0xdb, 0x15, 0x03, 0x02, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x0a, 0x00, 0x0a, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x81, 0x00, 0x00, 0x00, 0xff, 0x96, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x4b, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0xb2, 0xa4, 0xc9, 0x93, 0x28, 0x53, 0xaa, 0x5c, 0xc9, 0xb2, 0xa5, 0xcb, 0x97, 0x30, 0x63, 0xca, 0x9c, 0x49, 0xb3, 0xa6, 0xcd, 0x9b, 0x38, 0x73, 0xea, 0xdc, 0xc9, 0xb3, 0xa7, 0xcf, 0x9f, 0x09, 0x03, 0x02, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x14, 0x00, 0x00, 0x00, 0x2c, 0x0c, 0x00, 0x0c, 0x00, 0x29, 0x00, 0x29, 0x00, 0x81, 0x00, 0x00, 0x00, 0xff, 0x96, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x44, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0, 0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3, 0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18, 0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a, 0x1c, 0x49, 0xb2, 0xa4, 0xc9, 0x93, 0x28, 0x53, 0xaa, 0x5c, 0xc9, 0xb2, 0xa5, 0xcb, 0x97, 0x30, 0x63, 0xca, 0x9c, 0x49, 0xb3, 0xa6, 0xcd, 0x9b, 0x38, 0x73, 0x72, 0x0c, 0x08, 0x00, 0x3b},
}

// Application metadata
const appVersion = "1.0.0-multiplayer"
const appID = "com.opdai.multiplayer-companion"

func main() {
	// Parse embedded character data using standard library JSON
	var card character.CharacterCard
	if err := json.Unmarshal([]byte(embeddedCharacterData), &card); err != nil {
		log.Fatalf("Failed to parse embedded character data: %v", err)
	}

	// Create embedded animation manager
	animManager, err := createEmbeddedAnimationManager()
	if err != nil {
		log.Fatalf("Failed to create animation manager: %v", err)
	}

	// Initialize performance profiler (following project standards)
	profiler := monitoring.NewProfiler(50)
	if err := profiler.Start("", "", false); err != nil {
		log.Fatalf("Failed to start profiler: %v", err)
	}
	defer profiler.Stop("", false)

	// Create Fyne application with character-specific ID
	myApp := app.NewWithID(appID)
	
	// Create character with embedded assets (no filesystem dependencies)
	char, err := character.NewEmbedded(&card, animManager)
	if err != nil {
		log.Fatalf("Failed to create character: %v", err)
	}

	// Create and show UI (reusing existing UI components)
	window := ui.NewDesktopWindow(myApp, char, false, profiler, false, false, nil, false, false, false)
	window.Show()
	myApp.Run()
}

// createEmbeddedAnimationManager creates an animation manager from embedded data
// Uses standard library image/gif package for decoding
func createEmbeddedAnimationManager() (*character.AnimationManager, error) {
	animManager := character.NewAnimationManager()
	
	for name, data := range embeddedAnimations {
		reader := bytes.NewReader(data)
		gifData, err := gif.DecodeAll(reader)
		if err != nil {
			return nil, fmt.Errorf("failed to decode embedded animation %s: %w", name, err)
		}
		
		if err := animManager.LoadEmbeddedAnimation(name, gifData); err != nil {
			return nil, fmt.Errorf("failed to load embedded animation %s: %w", name, err)
		}
	}
	
	return animManager, nil
}
