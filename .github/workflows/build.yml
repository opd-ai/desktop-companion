name: Cross-Platform Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  ANDROID_NDK_VERSION: '25.2.9519653'  # Pin to compatible NDK version
  FYNE_MIN_VERSION: '2.5.0'            # Minimum Fyne version for Android compatibility
  LANG: en_US.UTF-8

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc pkg-config libgl1-mesa-dev xorg-dev libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libgl1-mesa-dev
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: go mod download
    
    - name: Run tests
      run: go test ./... -v -coverprofile=coverage.out
      #run: go test ./... -v -race -coverprofile=coverage.out
    
    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc pkg-config libgl1-mesa-dev xorg-dev libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libgl1-mesa-dev
    
    - name: Install fyne tool
      run: go install fyne.io/tools/cmd/fyne@latest
    
    - name: Build Linux binary
      run: |
        mkdir -p build artifacts
        go build -ldflags="-s -w" -o build/companion-linux-amd64 cmd/companion/main.go
        cp build/companion-linux-amd64 artifacts/
    
    - name: Package with assets
      run: |
        cd build
        cp -r ../assets .
        tar -czf companion-linux-amd64.tar.gz companion-linux-amd64 assets/
        mv companion-linux-amd64.tar.gz ../artifacts/
    
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: artifacts/

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Install fyne tool
      run: go install fyne.io/tools/cmd/fyne@latest
    
    - name: Build Windows binary
      run: |
        mkdir build -Force; mkdir artifacts -Force
        go build -ldflags="-s -w" -o build/companion-windows-amd64.exe cmd/companion/main.go
        copy build\companion-windows-amd64.exe artifacts\
    
    - name: Package with assets
      run: |
        cd build
        xcopy ..\assets assets\ /E /I
        powershell Compress-Archive -Path companion-windows-amd64.exe, assets -DestinationPath companion-windows-amd64.zip
        move companion-windows-amd64.zip ..\artifacts\
    
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: artifacts/

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Install Xcode command line tools
      run: |
        xcode-select --install || true

    - name: Install OpenGL (macOS)
      run: |
        brew install --cask xquartz
        brew install glfw glew
    - name: Ensure OpenGL headers
      run: |
        if [ ! -d "/opt/X11/include/GL" ]; then
          echo "OpenGL headers missing. XQuartz installation failed.";
          exit 1;
        fi

    - name: Ensure XQuartz OpenGL headers
      run: |
        brew install --cask xquartz
        brew install glew glfw
        sleep 10  # Give XQuartz time to finish post-install scripts
        sudo mkdir -p /opt/X11/include
        # Try both possible header locations
        if [ -d "/Applications/XQuartz.app/Contents/Resources/include/GL" ]; then
          sudo ln -sf /Applications/XQuartz.app/Contents/Resources/include/GL /opt/X11/include/GL
        elif [ -d "/opt/X11/include/GL" ]; then
          echo "OpenGL headers already present."
        else
          echo "OpenGL headers missing. XQuartz installation failed."
          exit 1
        fi 

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Install fyne tool
      run: go install fyne.io/tools/cmd/fyne@latest
    
    - name: Build macOS binaries
      run: |
        mkdir -p build artifacts
        export CGO_CFLAGS="-I/opt/X11/include"
        export CGO_LDFLAGS="-L/opt/X11/lib"
        export CGO_ENABLED=1
        # Intel
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o build/companion-macos-amd64 cmd/companion/main.go
        # Apple Silicon
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o build/companion-macos-arm64 cmd/companion/main.go
        cp build/companion-macos-* artifacts/
    
    - name: Package with assets
      run: |
        cd build
        cp -r ../assets .
        # Intel package
        tar -czf companion-macos-amd64.tar.gz companion-macos-amd64 assets/
        # Apple Silicon package
        tar -czf companion-macos-arm64.tar.gz companion-macos-arm64 assets/
        mv companion-macos-*.tar.gz ../artifacts/
    
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: artifacts/

  build-android:
    name: Build Android APKs (ARM64 + ARM32)
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '17'
    
    - name: Set up Android SDK
      uses: android-actions/setup-android@v2
      with:
        api-level: 30
        ndk-version: '25.1.8937393'
        cmake-version: '3.22.1'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc pkg-config libgl1-mesa-dev xorg-dev libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libgl1-mesa-dev
    
    - name: Install fyne tool
      run: go install fyne.io/tools/cmd/fyne@latest
    
    - name: Build Android APKs
      run: |
        mkdir -p build artifacts
        cd cmd/companion
        
        echo "Building Android APKs for both ARM64 and ARM32 architectures..."
        
        # Build ARM64 APK (primary Android architecture)
        echo "Building ARM64 APK..."
        fyne package --target android/arm64 --appID ai.opd.dds --name "DDS Companion" \
          --appVersion "0.1.0" --appBuild ${{ github.run_number }} \
          --icon "../../assets/app/icon.png" --release
        
        # Verify ARM64 APK was created
        if ! ls *.apk 1> /dev/null 2>&1; then
          echo "❌ CRITICAL FAILURE: Android ARM64 APK build failed"
          echo "No APK file found after ARM64 build completion"
          exit 1
        fi
        
        # Move ARM64 APK to artifacts
        cp *.apk ../../artifacts/companion-android-arm64.apk
        rm *.apk  # Clean up for next build
        echo "✅ Android ARM64 APK built successfully"
        ls -lh ../../artifacts/companion-android-arm64.apk
        
        # Build ARM32 APK (for older Android devices)
        echo "Building ARM32 APK..."
        fyne package --target android/arm --appID ai.opd.dds --name "DDS Companion" \
          --appVersion "0.1.0" --appBuild ${{ github.run_number }} \
          --icon "../../assets/app/icon.png" --release
        
        # Verify ARM32 APK was created
        if ! ls *.apk 1> /dev/null 2>&1; then
          echo "❌ CRITICAL FAILURE: Android ARM32 APK build failed"
          echo "No APK file found after ARM32 build completion"
          exit 1
        fi
        
        # Move ARM32 APK to artifacts
        cp *.apk ../../artifacts/companion-android-arm32.apk
        echo "✅ Android ARM32 APK built successfully"
        ls -lh ../../artifacts/companion-android-arm32.apk
        
        # Verify both APKs exist
        echo "=== Android APK Build Summary ==="
        echo "ARM64 APK: $(ls -lh ../../artifacts/companion-android-arm64.apk)"
        echo "ARM32 APK: $(ls -lh ../../artifacts/companion-android-arm32.apk)"
        echo "✅ Both Android APKs built successfully"
    
    - name: Validate Android APKs
      run: |
        echo "=== Android APK Validation ==="
        
        # Check ARM64 APK
        if [[ ! -f "artifacts/companion-android-arm64.apk" ]]; then
          echo "❌ CRITICAL FAILURE: ARM64 APK missing"
          exit 1
        fi
        
        arm64_size=$(stat -c%s "artifacts/companion-android-arm64.apk")
        min_size=$((1024 * 1024))  # 1MB minimum
        
        if [[ $arm64_size -lt $min_size ]]; then
          echo "❌ CRITICAL FAILURE: ARM64 APK too small ($arm64_size bytes, minimum: $min_size)"
          exit 1
        fi
        
        echo "✅ ARM64 APK validated: $arm64_size bytes"
        
        # Check ARM32 APK
        if [[ ! -f "artifacts/companion-android-arm32.apk" ]]; then
          echo "❌ CRITICAL FAILURE: ARM32 APK missing"
          exit 1
        fi
        
        arm32_size=$(stat -c%s "artifacts/companion-android-arm32.apk")
        
        if [[ $arm32_size -lt $min_size ]]; then
          echo "❌ CRITICAL FAILURE: ARM32 APK too small ($arm32_size bytes, minimum: $min_size)"
          exit 1
        fi
        
        echo "✅ ARM32 APK validated: $arm32_size bytes"
        echo "✅ Both Android APKs passed validation"
    
    - name: Upload Android artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-build
        path: artifacts/

  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos, build-android]
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Prepare release files
      run: |
        mkdir -p release
        cp linux-build/* release/ 2>/dev/null || true
        cp windows-build/* release/ 2>/dev/null || true
        cp macos-build/* release/ 2>/dev/null || true
        cp android-build/* release/ 2>/dev/null || true
        
        echo "=== Release Contents ==="
        ls -la release/
        
        # Verify both Android APKs are included
        if [[ -f "release/companion-android-arm64.apk" && -f "release/companion-android-arm32.apk" ]]; then
          echo "✅ Both Android APKs included in release"
          echo "   ARM64: $(ls -lh release/companion-android-arm64.apk | awk '{print $5}')"
          echo "   ARM32: $(ls -lh release/companion-android-arm32.apk | awk '{print $5}')"
        else
          echo "⚠️ Warning: Not all Android APKs found in release"
        fi
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: release/*
        draft: false
        prerelease: true
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
