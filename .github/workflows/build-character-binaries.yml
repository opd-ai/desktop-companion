name: Build Character-Specific Binaries

# This workflow builds character-specific binaries for multiple platforms including Android APKs.
# Android SDK/NDK setup uses the third-party action: android-actions/setup-android@v3
# For more details: https://github.com/android-actions/setup-android

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  ANDROID_NDK_VERSION: '25.2.9519653'  # Pin to compatible NDK version
  FYNE_MIN_VERSION: '2.5.0'            # Minimum Fyne version for Android compatibility
  LANG: en_US.UTF-8

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      characters: ${{ steps.characters.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Generate character matrix
        id: characters
        run: |
          # Make script executable first
          chmod +x scripts/build-characters.sh
          
          # Use existing build script to list characters
          CHARS=$(./scripts/build-characters.sh list | grep "✓" | sed 's/.*✓ //' | jq -R -s -c 'split("\n")[:-1]')
          
          # Validate that we got characters
          if [[ "$CHARS" == "[]" || -z "$CHARS" ]]; then
            echo "❌ No characters found in matrix generation"
            echo "Debug: Raw output from build script:"
            ./scripts/build-characters.sh list
            exit 1
          fi
          
          echo "matrix=$CHARS" >> $GITHUB_OUTPUT
          echo "Generated matrix: $CHARS"
          echo "✅ Successfully generated matrix with $(echo "$CHARS" | jq '. | length') characters"

  build-binaries:
    needs: generate-matrix
    strategy:
      fail-fast: false  # Continue all builds even if some fail, so we can validate all Android builds
      matrix:
        character: ${{ fromJson(needs.generate-matrix.outputs.characters) }}
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            ext: ""
          - os: windows-latest
            goos: windows
            goarch: amd64
            ext: ".exe"
          - os: macos-latest
            goos: darwin
            goarch: amd64
            ext: ""
          - os: macos-latest
            goos: darwin
            goarch: arm64
            ext: ""
            target_suffix: "-arm64"
          - os: ubuntu-latest
            goos: android
            goarch: arm64
            ext: ".apk"
            target_suffix: "-android"
          - os: ubuntu-latest
            goos: android
            goarch: arm
            ext: ".apk"
            target_suffix: "-android32"
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Make scripts executable
        run: |
          chmod +x scripts/*.sh
          chmod +x scripts/validate-*.sh 2>/dev/null || true
      
      - name: Clean Go module cache conflicts
        run: |
          # Remove problematic cached modules that cause permission conflicts
          if [ -d ~/go/pkg/mod ]; then
            # Fix permissions on existing cache to allow cleanup
            chmod -R u+w ~/go/pkg/mod 2>/dev/null || true
            # Remove specific problematic packages
            rm -rf ~/go/pkg/mod/gonum.org 2>/dev/null || true
          fi
        continue-on-error: true
      
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
        env:
          # Fix tar extraction conflicts by allowing overwrites and preserving permissions
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 5
        continue-on-error: true
      
      - name: Setup Android SDK
        if: matrix.goos == 'android'
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: 12266719
          packages: 'tools platform-tools build-tools;33.0.2 platforms;android-33 ndk;25.2.9519653'
          # Accept all Android SDK licenses automatically
          accept-android-sdk-licenses: true
        continue-on-error: false
      
      - name: Install dependencies
        run: |
          # Clean download with retry on failure
          go clean -modcache 2>/dev/null || true
          go mod download
          go mod tidy
          
          # Verify basic module structure (no internal packages - direct inheritance)
          echo "=== Module verification ==="
          echo "Module path: $(go list -m)"
          echo "Go version: $(go version)"
          echo "Module cache location: $(go env GOMODCACHE)"
      
      - name: Install platform dependencies
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update
            sudo apt-get install -y gcc pkg-config libgl1-mesa-dev xorg-dev libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev
            
            # Install Java 17 for Android builds
            if [[ "${{ matrix.goos }}" == "android" ]]; then
              sudo apt-get install -y openjdk-17-jdk
              echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV
              
              # Install fyne CLI for Android builds
              echo "Installing fyne CLI for Android builds..."
              go install fyne.io/tools/cmd/fyne@latest
              echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
              
              echo "✅ Android build dependencies installed"
            fi
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # macOS has necessary dependencies built-in
            echo "macOS dependencies ready"
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows Go includes necessary CGO support
            echo "Windows dependencies ready"
          fi
      
      - name: Generate embedded character
        run: |
          go run scripts/embed-character.go \
            -character ${{ matrix.character }} \
            -output cmd/${{ matrix.character }}-embedded
          
          # Verify the generated embedded character
          echo "=== Embedded character verification ==="
          echo "Generated files:"
          ls -la cmd/${{ matrix.character }}-embedded/
          echo ""
          echo "go.mod content:"
          cat cmd/${{ matrix.character }}-embedded/go.mod
      
      - name: Configure Android NDK toolchain
        if: matrix.goos == 'android'
        shell: bash
        run: |
          echo "Configuring NDK toolchain for Android builds..."
          
          # Force use of NDK version 25.2.9519653 (compatible with Fyne v2.4.5)
          export ANDROID_NDK_ROOT=/usr/local/lib/android/sdk/ndk/25.2.9519653
          export ANDROID_NDK_HOME=$ANDROID_NDK_ROOT
          
          # Verify NDK exists and fallback if needed
          if [[ ! -d "$ANDROID_NDK_ROOT" ]]; then
            echo "NDK 25.2.9519653 not found, checking available versions..."
            ls -la /usr/local/lib/android/sdk/ndk/ || true
            
            # Try to find any 25.x version
            NDK_25_DIR=$(find /usr/local/lib/android/sdk/ndk -maxdepth 1 -name "25.*" -type d | head -1)
            if [[ -n "$NDK_25_DIR" ]]; then
              export ANDROID_NDK_ROOT="$NDK_25_DIR"
              echo "Found compatible NDK: $ANDROID_NDK_ROOT"
            else
              echo "❌ No compatible NDK version found. Fyne v2.4.5 requires NDK 25.x"
              exit 1
            fi
          fi
          
          # Set up NDK toolchain for ARM64 (primary Android architecture)
          export CC=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang
          export CXX=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang++
          export AR=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar
          export STRIP=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip
          
          # Override for ARM32 if needed
          if [[ "${{ matrix.goarch }}" == "arm" ]]; then
            export CC=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi33-clang
            export CXX=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi33-clang++
          fi
          
          # Set Go cross-compilation variables
          export GOOS=android
          export GOARCH=${{ matrix.goarch }}
          export CGO_ENABLED=1
          # Add critical CGO flags for Android NDK compatibility
          export CGO_CFLAGS="-I$ANDROID_NDK_ROOT/sysroot/usr/include"
          export CGO_LDFLAGS="-L$ANDROID_NDK_ROOT/platforms/android-33/arch-arm/usr/lib"
          
          # Add environment variables for subsequent steps
          echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
          echo "CC=$CC" >> $GITHUB_ENV
          echo "CXX=$CXX" >> $GITHUB_ENV
          echo "AR=$AR" >> $GITHUB_ENV
          echo "STRIP=$STRIP" >> $GITHUB_ENV
          echo "GOOS=android" >> $GITHUB_ENV
          echo "GOARCH=${{ matrix.goarch }}" >> $GITHUB_ENV
          echo "CGO_ENABLED=1" >> $GITHUB_ENV
          echo "CGO_CFLAGS=-I$ANDROID_NDK_ROOT/sysroot/usr/include" >> $GITHUB_ENV
          echo "CGO_LDFLAGS=-L$ANDROID_NDK_ROOT/platforms/android-33/arch-arm/usr/lib" >> $GITHUB_ENV
          
          # Verify NDK tools exist
          if [[ -f "$CC" ]]; then
            echo "✅ NDK toolchain verified: $CC"
          else
            echo "❌ NDK toolchain not found: $CC"
            exit 1
          fi
          
          # Display Android setup summary
          echo "=== Android Build Environment Summary ==="
          echo "Android SDK: $ANDROID_SDK_ROOT"
          echo "Android NDK: $ANDROID_NDK_ROOT"
          echo "Java Version: $(java -version 2>&1 | head -1)"
          echo "Fyne Version: $(fyne version)"
          echo "Target Architecture: ${{ matrix.goarch }}"
          echo "C Compiler: $CC"
          echo "✅ Android NDK toolchain configured successfully"
      
      - name: Build character binary
        env:
          CGO_ENABLED: 1
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        shell: bash
        run: |
          mkdir -p build
          
          # Direct Android build with minimal module setup
          if [[ "${{ matrix.goos }}" == "android" ]]; then
            echo "Building Android APK for ${{ matrix.character }} (${{ matrix.goarch }})"
            
            # Validate NDK environment before building
            echo "=== Android Build Environment Validation ==="
            echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
            echo "CC: $CC"
            echo "CXX: $CXX"
            echo "CGO_ENABLED: $CGO_ENABLED"
            
            # Test compiler toolchain
            if ! $CC --version >/dev/null 2>&1; then
              echo "❌ C compiler failed: $CC"
              exit 1
            fi
            echo "✅ C compiler validated: $CC"
            
            # Create temporary build directory
            temp_build_dir=$(mktemp -d)
            trap "rm -rf $temp_build_dir" EXIT
            
            # Copy embedded character to temp directory
            cp -r cmd/${{ matrix.character }}-embedded/* "$temp_build_dir/"
            
            # With simplified module structure, we only need the embedded character files
            
            # Create FyneApp.toml for Android metadata
            cat > $temp_build_dir/FyneApp.toml << EOF
          [Details]
          Icon = "Icon.png"
          Name = "${{ matrix.character }} Companion"
          ID = "ai.opd.${{ matrix.character }}"
          Version = "1.0.0"
          Build = "${{ github.run_number }}"
          
          [Development]
          AutoInject = true
          EOF
            
            # Create app icon (use character-specific or default)
            if [[ -f "assets/characters/${{ matrix.character }}/icon.png" ]]; then
              cp "assets/characters/${{ matrix.character }}/icon.png" $temp_build_dir/Icon.png
            elif [[ -f "assets/app/icon.png" ]]; then
              cp "assets/app/icon.png" $temp_build_dir/Icon.png
            else
              echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==" | base64 -d > $temp_build_dir/Icon.png
            fi
            
            # Build APK with simplified module structure
            cd $temp_build_dir
            echo "Building APK with simplified module structure (single replace directive)..."
            echo "Working directory: $(pwd)"
            
            # Standard module setup (much simpler than previous approach)
            go mod download
            go mod tidy
            
            echo "Starting APK build process..."
            echo "Environment variables:"
            echo "  GOOS=$GOOS"
            echo "  GOARCH=$GOARCH" 
            echo "  CGO_ENABLED=$CGO_ENABLED"
            echo "  ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT"
            
            # Build APK with direct dependency resolution and better error handling
            build_success=false
            # Build APK - release build only, no fallback to debug
            if ! fyne package \
              --target "android/${{ matrix.goarch }}" \
              --name "${{ matrix.character }} Companion" \
              --app-id "ai.opd.${{ matrix.character }}" \
              --app-version "1.0.0" \
              --release 2>&1; then
              echo "❌ Android APK build failed for ${{ matrix.character }} (${{ matrix.goarch }})"
              echo "This is a required build failure - workflow will exit"
              echo "Debugging information:"
              echo "  - NDK version: $(ls -la $ANDROID_NDK_ROOT 2>/dev/null || echo 'NDK not found')"
              echo "  - Go version: $(go version)"
              echo "  - Fyne version: $(fyne version)"
              exit 1
            fi
            
            # Verify APK was created and move it to build directory
            apk_file=$(find . -name "*.apk" -type f | head -1)
            if [[ -z "$apk_file" ]]; then
              echo "❌ No APK file found after build completion"
              exit 1
            fi
            
            output_name="${{ matrix.character }}_android_${{ matrix.goarch }}${{ matrix.target_suffix || '' }}.apk"
            mkdir -p "$GITHUB_WORKSPACE/build"
            mv "$apk_file" "$GITHUB_WORKSPACE/build/$output_name"
            echo "✅ Android APK built successfully: $output_name"
            
            # Get APK info
            if command -v aapt >/dev/null 2>&1; then
              echo "APK Information:"
              aapt dump badging "$GITHUB_WORKSPACE/build/$output_name" | head -5
            fi
            
            # Show file size
            ls -lh "$GITHUB_WORKSPACE/build/$output_name"
            
          else
            # Direct build - no complex internal package resolution needed
            echo "Building ${{ matrix.character }} for ${{ matrix.goos }}/${{ matrix.goarch }}"
            
            binary_name="${{ matrix.character }}_${{ matrix.goos }}_${{ matrix.goarch }}${{ matrix.target_suffix || '' }}${{ matrix.ext }}"
            
            # Simple build using embedded character module
            go build -ldflags="-s -w" \
              -o "build/$binary_name" \
              ./cmd/${{ matrix.character }}-embedded
            
            echo "✓ Built binary: $binary_name"
          fi
      
      - name: Validate Android APK (if applicable)
        if: matrix.goos == 'android'
        shell: bash
        run: |
          apk_file="build/${{ matrix.character }}_android_${{ matrix.goarch }}${{ matrix.target_suffix || '' }}.apk"
          
          if [[ -f "$apk_file" ]]; then
            echo "Validating Android APK: $apk_file"
            
            # Check APK file size (should be reasonable)
            file_size=$(stat -f%z "$apk_file" 2>/dev/null || stat -c%s "$apk_file")
            min_size=$((1024 * 1024))      # 1MB minimum
            max_size=$((100 * 1024 * 1024)) # 100MB maximum
            
            if [[ $file_size -lt $min_size ]]; then
              echo "❌ APK file too small: $file_size bytes (minimum: $min_size)"
              exit 1
            elif [[ $file_size -gt $max_size ]]; then
              echo "⚠️ APK file quite large: $file_size bytes (maximum: $max_size)"
            else
              echo "✅ APK file size acceptable: $file_size bytes"
            fi
            
            # Validate APK structure using built-in tools
            if command -v unzip >/dev/null 2>&1; then
              echo "Checking APK contents..."
              required_files=("AndroidManifest.xml" "classes.dex" "META-INF/")
              
              for required in "${required_files[@]}"; do
                if unzip -l "$apk_file" | grep -q "$required"; then
                  echo "✅ Found required component: $required"
                else
                  echo "❌ Missing required component: $required"
                  exit 1
                fi
              done
            fi
            
            # Use our custom APK validator if available
            if [[ -f "tools/apk-validator/main.go" ]]; then
              echo "Running custom APK validation..."
              if go run tools/apk-validator/main.go "$apk_file" "${{ matrix.character }}"; then
                echo "✅ Custom APK validation passed"
              else
                echo "⚠️ Custom APK validation failed"
              fi
            fi
            
            echo "✅ Android APK validation completed successfully"
          else
            echo "❌ APK file not found: $apk_file"
            exit 1
          fi
      
      # Mandatory Android build verification - ensures all Android builds succeed
      - name: Mandatory Android Build Verification
        if: matrix.goos == 'android'
        shell: bash
        run: |
          apk_file="build/${{ matrix.character }}_android_${{ matrix.goarch }}${{ matrix.target_suffix || '' }}.apk"
          
          echo "=== MANDATORY ANDROID BUILD VERIFICATION ==="
          echo "Verifying required Android APK: $apk_file"
          
          # Critical: APK file must exist
          if [[ ! -f "$apk_file" ]]; then
            echo "❌ CRITICAL FAILURE: Required Android APK not found: $apk_file"
            echo "This is a mandatory build requirement - workflow will fail"
            exit 1
          fi
          
          # Critical: APK file must be valid size
          file_size=$(stat -c%s "$apk_file")
          min_size=$((1024 * 1024))  # 1MB minimum
          
          if [[ $file_size -lt $min_size ]]; then
            echo "❌ CRITICAL FAILURE: Android APK too small ($file_size bytes, minimum: $min_size)"
            echo "This indicates a build failure - workflow will fail"
            exit 1
          fi
          
          echo "✅ MANDATORY ANDROID BUILD VERIFICATION PASSED"
          echo "   APK file: $apk_file"
          echo "   File size: $file_size bytes"
          echo "   Character: ${{ matrix.character }}"
          echo "   Architecture: ${{ matrix.goarch }}"
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.character }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.target_suffix || '' }}
          path: build/${{ matrix.character }}_${{ matrix.goos }}_${{ matrix.goarch }}*
          retention-days: ${{ github.ref == 'refs/heads/main' && '30' || '7' }}

  # New job for artifact management and optimization
  optimize-artifacts:
    needs: [generate-matrix, build-binaries]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Validate Android Build Requirements
        run: |
          echo "=== ANDROID BUILD VALIDATION ==="
          
          # Get expected character count
          expected_characters='${{ needs.generate-matrix.outputs.characters }}'
          expected_count=$(echo "$expected_characters" | jq '. | length')
          
          echo "Expected characters: $expected_count"
          echo "Characters: $(echo "$expected_characters" | jq -r '.[]' | tr '\n' ' ')"
          
          # Count Android APKs for each architecture
          android_arm64_count=0
          android_arm_count=0
          missing_apks=()
          
          # Check each character for required Android builds
          echo "$expected_characters" | jq -r '.[]' | while read character; do
            echo "Checking Android builds for character: $character"
            
            # Check for ARM64 APK
            arm64_artifact="artifacts/${character}-android-arm64-android"
            arm64_apk=$(find "$arm64_artifact" -name "*.apk" 2>/dev/null | head -1)
            if [[ -n "$arm64_apk" && -f "$arm64_apk" ]]; then
              size=$(stat -c%s "$arm64_apk")
              echo "✅ Found ARM64 APK: $arm64_apk ($size bytes)"
              ((android_arm64_count++))
            else
              echo "❌ Missing ARM64 APK for $character"
              missing_apks+=("$character-android-arm64")
            fi
            
            # Check for ARM32 APK
            arm_artifact="artifacts/${character}-android-arm-android32"
            arm_apk=$(find "$arm_artifact" -name "*.apk" 2>/dev/null | head -1)
            if [[ -n "$arm_apk" && -f "$arm_apk" ]]; then
              size=$(stat -c%s "$arm_apk")
              echo "✅ Found ARM32 APK: $arm_apk ($size bytes)"
              ((android_arm_count++))
            else
              echo "❌ Missing ARM32 APK for $character"
              missing_apks+=("$character-android-arm32")
            fi
          done
          
          # Validate counts
          echo ""
          echo "=== ANDROID BUILD COUNT SUMMARY ==="
          echo "Expected characters: $expected_count"
          echo "Android ARM64 APKs found: $android_arm64_count"
          echo "Android ARM32 APKs found: $android_arm_count"
          echo "Total Android APKs expected: $((expected_count * 2))"
          echo "Total Android APKs found: $((android_arm64_count + android_arm_count))"
          
          if [[ ${#missing_apks[@]} -gt 0 ]]; then
            echo ""
            echo "❌ CRITICAL FAILURE: Missing Android APKs:"
            printf '  - %s\n' "${missing_apks[@]}"
            echo ""
            echo "This is a mandatory requirement for Android build validation"
            exit 1
          fi
          
          if [[ $android_arm64_count -ne $expected_count ]]; then
            echo "❌ CRITICAL FAILURE: Expected $expected_count ARM64 APKs, found $android_arm64_count"
            exit 1
          fi
          
          if [[ $android_arm_count -ne $expected_count ]]; then
            echo "❌ CRITICAL FAILURE: Expected $expected_count ARM32 APKs, found $android_arm_count"
            exit 1
          fi
          
          echo "✅ ANDROID BUILD VALIDATION PASSED"
          echo "All required Android APKs are present and accounted for"
      
      - name: Build artifact manager
        run: |
          go build -ldflags="-s -w" -o artifact-manager cmd/artifact-manager/main.go
      
      - name: Process and optimize artifacts
        run: |
          mkdir -p managed-artifacts/
          
          # Process each artifact with the artifact manager
          for artifact_dir in artifacts/*/; do
            if [[ -d "$artifact_dir" ]]; then
              artifact_name=$(basename "$artifact_dir")
              echo "Processing artifact: $artifact_name"
              
              # Extract character, platform, arch from artifact name
              IFS='-' read -ra PARTS <<< "$artifact_name"
              if [[ ${#PARTS[@]} -ge 3 ]]; then
                character="${PARTS[0]}"
                platform="${PARTS[1]}"
                arch="${PARTS[2]}"
                
                # Find the binary file in the artifact directory
                binary_file=$(find "$artifact_dir" -type f -executable 2>/dev/null | head -1)
                if [[ -z "$binary_file" ]]; then
                  # Fallback: find any file that's not a directory
                  binary_file=$(find "$artifact_dir" -type f | head -1)
                fi
                
                if [[ -n "$binary_file" ]]; then
                  echo "Storing artifact: $character $platform $arch $binary_file"
                  ./artifact-manager -dir managed-artifacts store "$character" "$platform" "$arch" "$binary_file"
                fi
              fi
            fi
          done
          
          # Generate artifact statistics
          echo "=== Artifact Statistics ==="
          ./artifact-manager -dir managed-artifacts stats
          
          # Apply production retention policy
          echo "=== Applying Retention Policies ==="
          ./artifact-manager -dir managed-artifacts compress production
      
      - name: Upload managed artifacts
        uses: actions/upload-artifact@v4
        with:
          name: managed-artifacts
          path: managed-artifacts/
          retention-days: 30

  package-releases:
    needs: [generate-matrix, build-binaries, optimize-artifacts]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Build artifact manager
        run: |
          go build -ldflags="-s -w" -o artifact-manager cmd/artifact-manager/main.go
      
      - name: Create release packages with enhanced metadata
        shell: bash
        run: |
          mkdir -p releases/
          
          # Create release info
          cat > releases/RELEASE_INFO.md << EOF
          # DDS Character Binary Release
          
          **Build Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          **Git Commit:** ${GITHUB_SHA:0:8}
          **GitHub Run:** ${GITHUB_RUN_NUMBER}
          **Workflow:** ${GITHUB_WORKFLOW}
          
          ## Available Characters
          EOF
          
          for char in $(echo '${{ needs.generate-matrix.outputs.characters }}' | jq -r '.[]'); do
            echo "Creating release package for $char..."
            mkdir -p releases/$char/
            
            # Copy all platform binaries for this character
            find artifacts/ -name "$char-*" -type d -exec cp -r {}/* releases/$char/ \; 2>/dev/null || true
            
            # Count artifacts and calculate total size
            artifact_count=$(find releases/$char/ -type f | wc -l)
            total_size=$(find releases/$char/ -type f -exec stat -c%s {} + 2>/dev/null | awk '{s+=$1} END {print s}' || echo "0")
            
            # Add character info to release notes
            echo "- **$char**: $artifact_count binaries, $(numfmt --to=iec $total_size 2>/dev/null || echo $total_size bytes)" >> releases/RELEASE_INFO.md
            
            # Create platform-specific archives with checksums
            for os in linux windows darwin; do
              ext=""
              archive_ext="tar.gz"
              if [[ "$os" == "windows" ]]; then
                ext=".exe"
                archive_ext="zip"
              fi
              
              # Handle both regular and ARM64 variants for macOS
              for arch_variant in "amd64" "arm64"; do
                suffix=""
                if [[ "$arch_variant" == "arm64" ]]; then
                  suffix="-arm64"
                fi
                
                binary_file="releases/$char/${char}_${os}_${arch_variant}${suffix}${ext}"
                if [[ -f "$binary_file" ]]; then
                  cd releases/$char/
                  
                  # Create archive
                  archive_name="../${char}_${os}_${arch_variant}${suffix}.${archive_ext}"
                  if [[ "$os" == "windows" ]]; then
                    zip -r "$archive_name" "${char}_${os}_${arch_variant}${suffix}${ext}"
                  else
                    tar -czf "$archive_name" "${char}_${os}_${arch_variant}${suffix}${ext}"
                  fi
                  
                  # Generate checksums
                  if command -v sha256sum >/dev/null; then
                    sha256sum "$archive_name" > "$archive_name.sha256"
                  fi
                  
                  cd ../../
                  echo "✓ Created package for $char on $os/$arch_variant"
                fi
              done
            done
          done
          
          # Create comprehensive manifest
          echo "" >> releases/RELEASE_INFO.md
          echo "## File Checksums" >> releases/RELEASE_INFO.md
          find releases/ -name "*.sha256" -exec cat {} \; >> releases/RELEASE_INFO.md
          
          # List all created packages
          echo "=== Created Release Packages ==="
          find releases/ -name "*.tar.gz" -o -name "*.zip" | sort
          
          # Generate release statistics
          total_packages=$(find releases/ -name "*.tar.gz" -o -name "*.zip" | wc -l)
          total_release_size=$(find releases/ -name "*.tar.gz" -o -name "*.zip" -exec stat -c%s {} + | awk '{s+=$1} END {print s}')
          
          echo "Release Summary:" >> releases/RELEASE_INFO.md
          echo "- Total Packages: $total_packages" >> releases/RELEASE_INFO.md
          echo "- Total Size: $(numfmt --to=iec $total_release_size 2>/dev/null || echo $total_release_size bytes)" >> releases/RELEASE_INFO.md
      
      - name: Upload release packages
        uses: actions/upload-artifact@v4
        with:
          name: character-releases
          path: releases/
          retention-days: 90
      
      - name: Upload release manifest
        uses: actions/upload-artifact@v4
        with:
          name: release-manifest
          path: releases/RELEASE_INFO.md
          retention-days: 365
