name: Build Character-Specific Binaries

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  
jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      characters: ${{ steps.characters.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Generate character matrix
        id: characters
        run: |
          # Use existing build script to list characters
          CHARS=$(./scripts/build-characters.sh list | grep "•" | sed 's/.*• //' | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix=$CHARS" >> $GITHUB_OUTPUT
          echo "Generated matrix: $CHARS"

  build-binaries:
    needs: generate-matrix
    strategy:
      matrix:
        character: ${{ fromJson(needs.generate-matrix.outputs.characters) }}
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            ext: ""
          - os: windows-latest
            goos: windows
            goarch: amd64
            ext: ".exe"
          - os: macos-latest
            goos: darwin
            goarch: amd64
            ext: ""
          - os: macos-latest
            goos: darwin
            goarch: arm64
            ext: ""
            target_suffix: "-arm64"
          - os: ubuntu-latest
            goos: android
            goarch: arm64
            ext: ".apk"
            target_suffix: "-android"
          - os: ubuntu-latest
            goos: android
            goarch: arm
            ext: ".apk"
            target_suffix: "-android32"
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: Install dependencies
        run: |
          go mod download
          go mod tidy
      
      - name: Install platform dependencies
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update
            sudo apt-get install -y gcc pkg-config libgl1-mesa-dev xorg-dev libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libgl1-mesa-dev
            
            # Install fyne CLI for Android builds
            if [[ "${{ matrix.goos }}" == "android" ]]; then
              echo "Installing fyne CLI for Android builds"
              go install fyne.io/tools/cmd/fyne@latest
              
              # Verify fyne installation
              if ! command -v fyne &> /dev/null; then
                echo "fyne CLI not found in PATH, adding Go bin to PATH"
                export PATH=$PATH:$(go env GOPATH)/bin
                echo "PATH=$PATH:$(go env GOPATH)/bin" >> $GITHUB_ENV
              fi
            fi
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # macOS has necessary dependencies built-in
            echo "macOS dependencies ready"
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows Go includes necessary CGO support
            echo "Windows dependencies ready"
          fi
      
      - name: Generate embedded character
        run: |
          go run scripts/embed-character.go \
            -character ${{ matrix.character }} \
            -output cmd/companion-${{ matrix.character }}
      
      - name: Build character binary
        env:
          CGO_ENABLED: 1
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        shell: bash
        run: |
          mkdir -p build
          
          # Use build script for all platforms (it handles Android specially)
          export PLATFORMS="${{ matrix.goos }}/${{ matrix.goarch }}"
          export LDFLAGS="-s -w"
          
          # Build using the build script which handles Android builds
          if ! ./scripts/build-characters.sh build ${{ matrix.character }}; then
            echo "Build script failed, trying fallback method..."
            
            # Fallback to manual build for non-Android platforms
            if [[ "${{ matrix.goos }}" != "android" ]]; then
              binary_name="${{ matrix.character }}_${{ matrix.goos }}_${{ matrix.goarch }}${{ matrix.target_suffix || '' }}${{ matrix.ext }}"
              go build -ldflags="-s -w" \
                -o "build/$binary_name" \
                ./cmd/companion-${{ matrix.character }}
              echo "Built binary: $binary_name"
            else
              echo "Android build failed and no fallback available"
              exit 1
            fi
          else
            echo "Build script completed successfully"
          fi
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.character }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.target_suffix || '' }}
          path: build/${{ matrix.character }}_${{ matrix.goos }}_${{ matrix.goarch }}*
          retention-days: ${{ github.ref == 'refs/heads/main' && '30' || '7' }}

  # New job for artifact management and optimization
  optimize-artifacts:
    needs: [generate-matrix, build-binaries]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Build artifact manager
        run: |
          go build -ldflags="-s -w" -o artifact-manager cmd/artifact-manager/main.go
      
      - name: Process and optimize artifacts
        run: |
          mkdir -p managed-artifacts/
          
          # Process each artifact with the artifact manager
          for artifact_dir in artifacts/*/; do
            if [[ -d "$artifact_dir" ]]; then
              artifact_name=$(basename "$artifact_dir")
              echo "Processing artifact: $artifact_name"
              
              # Extract character, platform, arch from artifact name
              IFS='-' read -ra PARTS <<< "$artifact_name"
              if [[ ${#PARTS[@]} -ge 3 ]]; then
                character="${PARTS[0]}"
                platform="${PARTS[1]}"
                arch="${PARTS[2]}"
                
                # Find the binary file in the artifact directory
                binary_file=$(find "$artifact_dir" -type f -executable 2>/dev/null | head -1)
                if [[ -z "$binary_file" ]]; then
                  # Fallback: find any file that's not a directory
                  binary_file=$(find "$artifact_dir" -type f | head -1)
                fi
                
                if [[ -n "$binary_file" ]]; then
                  echo "Storing artifact: $character $platform $arch $binary_file"
                  ./artifact-manager -dir managed-artifacts store "$character" "$platform" "$arch" "$binary_file"
                fi
              fi
            fi
          done
          
          # Generate artifact statistics
          echo "=== Artifact Statistics ==="
          ./artifact-manager -dir managed-artifacts stats
          
          # Apply production retention policy
          echo "=== Applying Retention Policies ==="
          ./artifact-manager -dir managed-artifacts compress production
      
      - name: Upload managed artifacts
        uses: actions/upload-artifact@v4
        with:
          name: managed-artifacts
          path: managed-artifacts/
          retention-days: 30

  package-releases:
    needs: [generate-matrix, build-binaries, optimize-artifacts]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Build artifact manager
        run: |
          go build -ldflags="-s -w" -o artifact-manager cmd/artifact-manager/main.go
      
      - name: Create release packages with enhanced metadata
        shell: bash
        run: |
          mkdir -p releases/
          
          # Create release info
          cat > releases/RELEASE_INFO.md << EOF
          # DDS Character Binary Release
          
          **Build Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          **Git Commit:** ${GITHUB_SHA:0:8}
          **GitHub Run:** ${GITHUB_RUN_NUMBER}
          **Workflow:** ${GITHUB_WORKFLOW}
          
          ## Available Characters
          EOF
          
          for char in $(echo '${{ needs.generate-matrix.outputs.characters }}' | jq -r '.[]'); do
            echo "Creating release package for $char..."
            mkdir -p releases/$char/
            
            # Copy all platform binaries for this character
            find artifacts/ -name "$char-*" -type d -exec cp -r {}/* releases/$char/ \; 2>/dev/null || true
            
            # Count artifacts and calculate total size
            artifact_count=$(find releases/$char/ -type f | wc -l)
            total_size=$(find releases/$char/ -type f -exec stat -c%s {} + 2>/dev/null | awk '{s+=$1} END {print s}' || echo "0")
            
            # Add character info to release notes
            echo "- **$char**: $artifact_count binaries, $(numfmt --to=iec $total_size 2>/dev/null || echo $total_size bytes)" >> releases/RELEASE_INFO.md
            
            # Create platform-specific archives with checksums
            for os in linux windows darwin; do
              ext=""
              archive_ext="tar.gz"
              if [[ "$os" == "windows" ]]; then
                ext=".exe"
                archive_ext="zip"
              fi
              
              # Handle both regular and ARM64 variants for macOS
              for arch_variant in "amd64" "arm64"; do
                suffix=""
                if [[ "$arch_variant" == "arm64" ]]; then
                  suffix="-arm64"
                fi
                
                binary_file="releases/$char/${char}_${os}_${arch_variant}${suffix}${ext}"
                if [[ -f "$binary_file" ]]; then
                  cd releases/$char/
                  
                  # Create archive
                  archive_name="../${char}_${os}_${arch_variant}${suffix}.${archive_ext}"
                  if [[ "$os" == "windows" ]]; then
                    zip -r "$archive_name" "${char}_${os}_${arch_variant}${suffix}${ext}"
                  else
                    tar -czf "$archive_name" "${char}_${os}_${arch_variant}${suffix}${ext}"
                  fi
                  
                  # Generate checksums
                  if command -v sha256sum >/dev/null; then
                    sha256sum "$archive_name" > "$archive_name.sha256"
                  fi
                  
                  cd ../../
                  echo "✓ Created package for $char on $os/$arch_variant"
                fi
              done
            done
          done
          
          # Create comprehensive manifest
          echo "" >> releases/RELEASE_INFO.md
          echo "## File Checksums" >> releases/RELEASE_INFO.md
          find releases/ -name "*.sha256" -exec cat {} \; >> releases/RELEASE_INFO.md
          
          # List all created packages
          echo "=== Created Release Packages ==="
          find releases/ -name "*.tar.gz" -o -name "*.zip" | sort
          
          # Generate release statistics
          total_packages=$(find releases/ -name "*.tar.gz" -o -name "*.zip" | wc -l)
          total_release_size=$(find releases/ -name "*.tar.gz" -o -name "*.zip" -exec stat -c%s {} + | awk '{s+=$1} END {print s}')
          
          echo "Release Summary:" >> releases/RELEASE_INFO.md
          echo "- Total Packages: $total_packages" >> releases/RELEASE_INFO.md
          echo "- Total Size: $(numfmt --to=iec $total_release_size 2>/dev/null || echo $total_release_size bytes)" >> releases/RELEASE_INFO.md
      
      - name: Upload release packages
        uses: actions/upload-artifact@v4
        with:
          name: character-releases
          path: releases/
          retention-days: 90
          if-no-files-found: ignore
      
      - name: Upload release manifest
        uses: actions/upload-artifact@v4
        with:
          name: release-manifest
          path: releases/RELEASE_INFO.md
          retention-days: 365
